@using System.Security.Claims
@using System.Timers

<MudAppBar Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Style="color: white" Edge="Edge.Start"
                   OnClick="DrawerToggle" />
    <MudHidden Breakpoint="Breakpoint.Xs">
        <MudText Typo="Typo.h6" Class="ml-3">جواهری فانی (@_username)</MudText>
    </MudHidden>
    <MudSpacer />

    <Calculator />

    <Notification />

    <MudToggleIconButton ToggledChanged="DarkModeStateChanged"
                         Icon="@Icons.Material.Filled.WbSunny" Color="@Color.Inherit" Title="حالت شب"
                             ToggledIcon="@Icons.Material.Filled.DarkMode" ToggledColor="@Color.Inherit" ToggledTitle="حالت روز" />
    
    <MudHidden Breakpoint="Breakpoint.Xs">
        <MudText Typo="Typo.h6" Class="mr-3">@_currentDateTime</MudText>
    </MudHidden>

</MudAppBar>

@code {
    [Parameter]
    public bool DrawerOpen { get; set; }

    [Parameter]
    public bool DarkModeState { get; set; }

    [Parameter]
    public EventCallback<bool> DrawerOpenChanged { get; set; }

    [Parameter]
    public EventCallback<bool> DarkModeStateChanged { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private string? _username;
    private Timer? _timer;
    private string? _currentDateTime;

    protected override async Task OnInitializedAsync()
    {
        _timer = new Timer(1000);
        _timer.Elapsed += TimerElapsed;
        _timer.Start();

        _currentDateTime = DateTime.Now.ToShortTimeString();
        var authenticationState = await AuthenticationStateTask;
        var user = authenticationState.User;

        _username = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Name)?.Value;
        await base.OnInitializedAsync();
    }

    private void TimerElapsed(object? sender, ElapsedEventArgs e)
    {
        _currentDateTime = DateTime.Now.ToShortTimeString();
        InvokeAsync(StateHasChanged);
    }

    private async Task DrawerToggle()
    {
        await DrawerOpenChanged.InvokeAsync(!DrawerOpen);
    }

    private async Task DarkModeToggle()
    {
        await DarkModeStateChanged.InvokeAsync(!DarkModeState);
    }
}