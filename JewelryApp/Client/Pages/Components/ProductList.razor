@using JewelryApp.Models.Dtos
@using JewelryApp.Common.Enums

@inherits UserComponentBase

@inject ISnackbar Snackbar
@inject IDialogService Dialog

<MudTable Class="@Class" ServerData="@(new Func<TableState, Task<TableData<ProductTableItemDto>>>(ServerReload))"
          Hover="true" @ref="table" RowEditCommit="async e => await CommitItemAsync(e)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">لیست اجناس</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="جستجو" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Style="max-width: 200px;" Class="mt-0"></MudTextField>
        <MudSpacer />

        <MudButton Color="Color.Primary" OnClick="@((e) => OpenAddProductDialog(_dialogOptions, "افزودن جنس"))"
                   EndIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled">افزودن</MudButton>

    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="barcodetext_field" T="ProductTableItemDto">کد جنس</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="ProductTableItemDto">نام جنس</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="weight_field" T="ProductTableItemDto">وزن</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="wage_field" T="ProductTableItemDto">اجرت ساخت</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="productType_field" T="ProductTableItemDto">نوع جنس</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="caret_field" T="ProductTableItemDto">عیار</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="ProductTableItemDto">عملیات</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="بارکد جنس">@context.BarcodeText</MudTd>
        <MudTd DataLabel="نام جنس">@context.Name</MudTd>
        <MudTd DataLabel="وزن">@context.Weight</MudTd>
        <MudTd DataLabel="اجرت">@context.Wage</MudTd>
        <MudTd DataLabel="نوع جنس">@context.ProductType.ToDisplay()</MudTd>
        <MudTd DataLabel="عیار">@context.Caret.ToDisplay()</MudTd>
        <MudTd DataLabel="عملیات">
            <MudButton Size="@Size.Small" Variant="@Variant.Filled" EndIcon="@Icons.Material.Filled.Print"
                       Color="@Color.Primary">چاپ بارکد</MudButton>
            <MudButton OnClick="@((e) => OpenDeleteProductDialog(_dialogOptions, context.Id))" Size="@Size.Small" Variant="@Variant.Filled" EndIcon="@Icons.Material.Filled.Delete"
                       Color="@Color.Error">حذف</MudButton>
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="بارکد جنس">@context.BarcodeText</MudTd>
        <MudTd DataLabel="نام جنس">
            <MudTextField @bind-Value="@context.Name" Required />
        </MudTd>
        <MudTd DataLabel="وزن">
            <MudNumericField @bind-Value="@context.Weight" Required Min="0.01" />
        </MudTd>
        <MudTd DataLabel="اجرت">
            <MudNumericField @bind-Value="@context.Wage" Required Min="1" />
        </MudTd>
        <MudTd DataLabel="نوع جنس">
            <MudSelect T="ProductType" Label="نوع جنس" @bind-Value="context.ProductType" Variant="Variant.Text">
                @foreach (ProductType productType in Enum.GetValues(typeof(ProductType)))
                {
                    <MudSelectItem T="ProductType" Value="productType">@productType.ToDisplay()</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="عیار">
            <MudSelect T="Caret" Label="عیار" @bind-Value="context.Caret" Variant="Variant.Text">
                @foreach (Caret caret in Enum.GetValues(typeof(Caret)))
                {
                    <MudSelectItem T="Caret" Value="caret">@caret.ToDisplay()</MudSelectItem>
                }
            </MudSelect>
        </MudTd>

    </RowEditingTemplate>
    <NoRecordsContent>
        <MudText>هیچ جنسی یافت نشد</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>در حال بارگذاری</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager HorizontalAlignment="HorizontalAlignment.Center" />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

@code
{
    private IEnumerable<ProductTableItemDto> pagedData;
    private MudTable<ProductTableItemDto> table;

    private int totalItems;
    private string searchString = null;
    
    private async Task<TableData<ProductTableItemDto>> ServerReload(TableState state)
    {
        await LoadData();
        _products = _products.Where(product =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (product.BarcodeText.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (product.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{product.Weight} {product.Wage} {product.ProductType.ToDisplay()} {product.Caret.ToDisplay()}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = _products.Count();
        switch (state.SortLabel)
        {
            case "barcodetext_field":
                _products = _products.OrderByDirection(state.SortDirection, o => o.BarcodeText);
                break;
            case "name_field":
                _products = _products.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "weight_field":
                _products = _products.OrderByDirection(state.SortDirection, o => o.Weight);
                break;
            case "wage_field":
                _products = _products.OrderByDirection(state.SortDirection, o => o.Wage);
                break;
            case "productType_field":
                _products = _products.OrderByDirection(state.SortDirection, o => o.ProductType);
                break;
            case "caret_field":
                _products = _products.OrderByDirection(state.SortDirection, o => o.Caret);
                break;
        }

        pagedData = _products.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<ProductTableItemDto>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public bool Filterable { get; set; }

    private IEnumerable<ProductTableItemDto>? _products;


    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
        await base.OnParametersSetAsync();
    }

    DialogOptions _dialogOptions = new() { CloseButton = true, FullWidth = true, FullScreen = false };

    private async Task OpenAddProductDialog(DialogOptions options, string dialogTitle)
    {
        var dialog = await Dialog.ShowAsync<ProductDialog>(dialogTitle, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if ((bool)result.Data == true)
            {
                Snackbar.Add("جنس با موفقیت افزوده شد", Severity.Success);
                await table.ReloadServerData();
            }
            else
            {
                Snackbar.Add("افزودن جنس با خطا مواجه شد", Severity.Error);
            }
        }
    }

    private async Task LoadData()
    {
        _products = await AuthorizedHttpClient.GetFromJsonAsync<IEnumerable<ProductTableItemDto>>("/api/Products");
    }

    private async Task CommitItemAsync(object elemnt)
    {
        var product = elemnt as ProductTableItemDto;

        var productDto = new SetProductDto()
            {
                Id = product.Id,
                Name = product.Name,
                Caret = product.Caret,
                ProductType = product.ProductType,
                Wage = product.Wage,
                Weight = product.Weight,
                BarcodeText = product.BarcodeText
            };
        var httpResponseMessage = await AuthorizedHttpClient.PostAsJsonAsync($"/api/Products", productDto);

        if (httpResponseMessage.IsSuccessStatusCode)
        {
            Snackbar.Add("جنس با موفقیت ویرایش شد", Severity.Success);
        }
        else
        {
            Snackbar.Add("خطا در ویرایش جنس، لطفا مجددا امتحان کنید", Severity.Error);
        }
    }

    private async Task OpenDeleteProductDialog(DialogOptions options, int productId)
    {
        var parameters = new DialogParameters<PromptDialog>();
        parameters.Add(x => x.ContentText, "آیا مطمئن هستید؟ تنها اجناسی قابل حذف می باشند که در فاکتوری استفاده نشده باشند");
        parameters.Add(x => x.ButtonText, "حذف");
        parameters.Add(x => x.Color, Color.Error);
        parameters.Add(x => x.EndIcon, Icons.Material.Filled.Delete);
        parameters.Add(x => x.ProductId, productId);

        var dialog = await Dialog.ShowAsync<PromptDialog>("حذف جنس", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if ((bool)result.Data == true)
            {
                Snackbar.Add("جنس با موفقیت حذف شد", Severity.Success);
                await table.ReloadServerData();
            }
            else
            {
                Snackbar.Add("جنس مورد نظر حذف نشد", Severity.Success);
            }
            
        }
    }
}
