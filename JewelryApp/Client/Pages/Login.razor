@page "/login"
@layout LoginLayout
@inherits UserComponentBase

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="center-grid">
        <MudItem xs="12" sm="7">
            <MudStack Justify="Justify.Center">
                <MudCard Elevation="24" Square="true" Outlined="true" Class="round-card">
                    <div class="text-center">
                        <img style="width: 150px; height: 150px;" src="/img/logo.png" alt="logo"><br>
                        <MudText Typo="Typo.h5" Color="Color.Info">جواهری فانی</MudText>
                    </div>
                    <MudCardContent>
                        <MudTextField Label="نام کاربری"
                                      @bind-Value="model.UserName" For="@(() => model.UserName)" />

                        <MudTextField Label="رمز عبور" Class="mt-3"
                                      @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions Class="m-4">
                        <MudButton EndIcon="@Icons.Material.Filled.Login" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                                   Color="Color.Primary" Class="ml-auto">ورود به سیستم</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudStack>
            
        </MudItem>
    </div>
</EditForm>



@code {
    LoginDto model = new LoginDto();
    bool _success;

    [Inject] private AuthenticationStateProvider AuthStateProvider { get; set; } = default!;
    
    private async Task OnValidSubmit(EditContext context)
    {
        var httpResponse = await UnauthorizedHttpClient.PostAsJsonAsync("login", model);

        if (httpResponse.IsSuccessStatusCode)
        {
            var responseContent = await httpResponse.Content.ReadAsStringAsync();
            var userToken = JsonSerializer.Deserialize<UserTokenDto>(responseContent, new JsonSerializerOptions
                {
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase
                });
            if (userToken != null && AuthStateProvider is AppAuthStateProvider authStateProvider)
            {
                await authStateProvider.LoginAsync(userToken.Token, userToken.RefreshToken);

                NavigationManager.NavigateTo("/");
            }
        }
    }

}